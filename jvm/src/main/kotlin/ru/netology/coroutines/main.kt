package ru.netology.coroutines

import com.google.gson.Gson
import com.google.gson.reflect.TypeToken
import kotlinx.coroutines.*
import okhttp3.*
import okhttp3.logging.HttpLoggingInterceptor
import ru.netology.coroutines.dto.Author
import ru.netology.coroutines.dto.Comment
import ru.netology.coroutines.dto.Post
import ru.netology.coroutines.dto.PostWithComments
import java.io.IOException
import java.util.concurrent.TimeUnit
import kotlin.coroutines.EmptyCoroutineContext
import kotlin.coroutines.resume
import kotlin.coroutines.resumeWithException
import kotlin.coroutines.suspendCoroutine

private val gson = Gson()
private const val BASE_URL = "http://127.0.0.1:9999"
private val client = OkHttpClient.Builder()
    .addInterceptor(HttpLoggingInterceptor(::println).apply {
        level = HttpLoggingInterceptor.Level.BODY
    })
    .connectTimeout(30, TimeUnit.SECONDS)
    .build()

fun main() {
    with(CoroutineScope(EmptyCoroutineContext)) {
        // –í—ã–∑–æ–≤ –∫–æ—Ä—É—Ç–∏–Ω—ã —Å –æ–±—ä—è–≤–ª–µ–Ω–Ω—ã–º–∏ —Ä–∞–Ω–µ–µ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏
        launch {
            try {
                val posts = getPosts(client)
                    .map { post ->
                        async { // –°–æ–∑–¥–∞–µ—Ç —Å–æ–ø—Ä–æ–≥—Ä–∞–º–º—É –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –µ–µ –±—É–¥—É—â–∏–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç –∫–∞–∫ —Ä–µ–∞–ª–∏–∑–∞—Ü–∏—é Deferred.
                            //val commentAuthor = post.comment.forEach{ comment -> getAuthor(client, comment.authorId)}
                            val comments = getComments(client, post.id)
                            val authorsComment =  comments.map {getAuthor(client, it.authorId)}
                            PostWithComments(post, comments, getAuthor(client, post.authorId), authorsComment)
                            // –ü–æ –∏–¥–µ–µ, –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∏–Ω—Å—Ç–∞–Ω—Å—ã –∫–ª–∞—Å—Å–∞ PostWithComments,
                            // —Å –ø–æ–ª—è–º–∏, –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–º–∏ –ø–æ–ª—É—á–µ–Ω–Ω—ã–º–∏ –¥–æ —ç—Ç–æ–≥–æ –ø–æ—Å—Ç–∞–º–∏ –∏ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è–º–∏,
                            // –ø–æ—Å—Ä–µ–¥—Å—Ç–≤–æ–º –≤—ã–∑–æ–≤–∞ getComments –ø—Ä—è–º–æ –≤ –∫–æ–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä–µ, –∏ –ø–µ—Ä–µ–¥–∞—á–µ–π –µ–º—É
                            // id —Ç–µ–∫—É—â–µ–≥–æ –ø–æ—Å—Ç–∞. –ü–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤—É –ø–æ–ª—É—á–µ–Ω–Ω—ã—Ö –ø–æ—Å—Ç–æ–≤ –∏–∑ getPosts.
                        }
                    }.awaitAll() // –í—ã–∑–æ–≤–µ—Ç –º–µ—Ç–æ–¥ await –¥–ª—è –≤—Å–µ—Ö (deferred) —ç–ª–µ–º–µ–Ω—Ç–æ–≤ –∫–æ–ª–ª–µ–∫—Ü–∏–∏.
                // –°–Ω–∞—á–∞–ª–∞ –±—É–¥–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –∑–∞–ø—Ä–æ—Å –Ω–∞ –ø–æ–ª—É—á–µ–Ω–∏–µ –ø–æ—Å—Ç–æ–≤. –ó–∞—Ç–µ–º, –æ–¥–Ω–æ–≤—Ä–µ–º–µ–Ω–Ω–æ,
                // –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —Å—Ä–∞–∑—É –Ω–µ—Å–∫–æ–ª—å–∫–æ –∑–∞–ø—Ä–æ—Å–æ–≤ –Ω–∞ –ø–æ–ª—É—á–µ–Ω–∏–µ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤.
                // –¢.–µ –æ–Ω –Ω–µ –±—É–¥–µ—Ç –∂–¥–∞—Ç—å —Å—Ä–∞–∑—É –≤—Å–µ—Ö –ø–æ—Å—Ç–æ–≤, –∫–∞–∫ —Å Sequenceü§î?
                println(posts)
            } catch (e: Exception) {
                e.printStackTrace()
            }
        }
    }
    Thread.sleep(30_000L)
}

suspend fun OkHttpClient.apiCall(url: String): Response {
    // –ö–∞—Å—Ç–æ–º–Ω–æ–µ —Ä–∞—Å—à–∏—Ä–µ–Ω–∏–µ-—Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –∫–ª–∞—Å—Å–∞ OkHttpClient
    return suspendCoroutine { continuation ->
        // –§—É–Ω–∫—Ü–∏—è suspendCoroutine() –≤ Kotlin –ø–æ–∑–≤–æ–ª—è–µ—Ç —Å–æ–∑–¥–∞—Ç—å —Ñ—É–Ω–∫—Ü–∏—é suspend –∏–∑ API
        // –Ω–∞ –æ—Å–Ω–æ–≤–µ –æ–±—Ä–∞—Ç–Ω–æ–≥–æ –≤—ã–∑–æ–≤–∞. –û–Ω–∞ –ø—Ä–∏–Ω–∏–º–∞–µ—Ç –ª—è–º–±–¥–∞-–≤—ã—Ä–∞–∂–µ–Ω–∏–µ —Å –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–º –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è
        // –≤ –∫–∞—á–µ—Å—Ç–≤–µ –∞—Ä–≥—É–º–µ–Ω—Ç–∞. –§—É–Ω–∫—Ü–∏—è –∏—Å–ø–æ–ª—å–∑—É–µ—Ç —ç—Ç–æ—Ç –æ–±—ä–µ–∫—Ç –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è –¥–ª—è –ø—Ä–∏–æ—Å—Ç–∞–Ω–æ–≤–∫–∏
        // —Ç–µ–∫—É—â–µ–π —Å–æ–ø—Ä–æ–≥—Ä–∞–º–º—ã –¥–æ —Ç–µ—Ö –ø–æ—Ä, –ø–æ–∫–∞ –Ω–µ –±—É–¥–µ—Ç –≤—ã–∑–≤–∞–Ω –æ–±—Ä–∞—Ç–Ω—ã–π –≤—ã–∑–æ–≤.
        // –ö–∞–∫ —Ç–æ–ª—å–∫–æ —ç—Ç–æ –ø—Ä–æ–∏–∑–æ–π–¥—ë—Ç, –æ–±—ä–µ–∫—Ç –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è –≤–æ–∑–æ–±–Ω–æ–≤–ª—è–µ—Ç —Å–æ–ø—Ä–æ–≥—Ä–∞–º–º—É
        // –∏ –ø–µ—Ä–µ–¥–∞—ë—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç –æ–±—Ä–∞—Ç–Ω–æ–≥–æ –≤—ã–∑–æ–≤–∞ –æ–±—Ä–∞—Ç–Ω–æ –≤—ã–∑—ã–≤–∞—é—â–µ–º—É –∫–æ–¥—É.
        Request.Builder()
            .url(url)
            .build()
            .let(::newCall)
            .enqueue(object : Callback {
                override fun onResponse(call: Call, response: Response) {
                    continuation.resume(response)
                    // –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º –∫–æ—Ä—É—Ç–∏–Ω—É —Å —ç—Ç–∏–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–º
                    // continuation.resume - –≤–æ–∑–æ–±–Ω–æ–≤–ª—è–µ—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–µ–π —Å–æ–ø—Ä–æ–≥—Ä–∞–º–º—ã,
                    // –ø–µ—Ä–µ–¥–∞–≤–∞—è –∑–Ω–∞—á–µ–Ω–∏–µ –∫–∞–∫ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –ø–æ—Å–ª–µ–¥–Ω–µ–π —Ç–æ—á–∫–∏ –ø—Ä–∏–æ—Å—Ç–∞–Ω–æ–≤–∫–∏.
                }

                override fun onFailure(call: Call, e: IOException) {
                    continuation.resumeWithException(e)
                }
            })
    }
}

suspend fun <T> makeRequest(url: String, client: OkHttpClient, typeToken: TypeToken<T>): T =
    // –ò—Å–ø–æ–ª—å–∑—É–µ—Ç –∏–Ω—Å—Ç–∞–Ω—Å ("client") OkHttpClient, —á—Ç–æ–±—ã –≤—ã–∑–≤–∞—Ç—å apiCall, –æ–±—ä—è–≤–ª–µ–Ω–Ω—É—é —Ä–∞–Ω–µ–µ
    withContext(Dispatchers.IO) { // –ü–µ—Ä–µ—á—ë—Ä–∫–Ω—É—Ç–∞—è —Å—Ç—Ä–µ–ª–æ—á–∫–∞ —Å–ª–µ–≤–∞, ‚Äî —ç—Ç–æ –≤—ã–∑–æ–≤ suspend —Ñ—É–Ω–∫—Ü–∏–∏
        // - Dispatchers.IO - –æ–ø—Ä–µ–¥–µ–ª—è–µ—Ç –ª–æ–≥–∏–∫—É –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–∏ –ø–æ—Ç–æ–∫–æ–≤. –î–ª—è IO —ç—Ç–æ –ø—É–ª —Ç—Ä–µ–¥–æ–≤ (64 –ø–æ—Ç–æ–∫–∞)
        // –ê –æ–±—Ä–∞—â–µ–Ω–∏–µ –∫ —Å–µ—Ä–≤–µ—Ä—É, —ç—Ç–æ –∂–µ I/O –æ–ø–µ—Ä–∞—Ü–∏—è
        // –ü–æ –∏–¥–µ–µ ‚òùÔ∏è, —ç—Ç–∞ –æ–ø—Ü–∏—è –Ω—É–∂–Ω–∞ —Ç–æ–ª—å–∫–æ –¥–ª—è –≤—ã—Å—Ç—Ä–∞–∏–≤–∞–Ω–∏—è –ª–æ–≥–∏–∫–∏ —Ä–∞–±–æ—Ç—ã –ø—Ä–æ–≥—Ä–∞–º–º—ã.
        // - withContext - –≤—ã–∑—ã–≤–∞–µ—Ç —É–∫–∞–∑–∞–Ω–Ω—ã–π –±–ª–æ–∫ –ø—Ä–∏–æ—Å—Ç–∞–Ω–æ–≤–∫–∏ —Å –∑–∞–¥–∞–Ω–Ω—ã–º –∫–æ–Ω—Ç–µ–∫—Å—Ç–æ–º —Å–æ–ø—Ä–æ–≥—Ä–∞–º–º—ã,
        // –ø—Ä–∏–æ—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –µ–≥–æ –¥–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç.
        client.apiCall(url)
            .let { response ->
                if (!response.isSuccessful) {
                    response.close()
                    throw RuntimeException(response.message)
                }
                val body = response.body ?: throw RuntimeException("response body is null")
                gson.fromJson(body.string(), typeToken.type)
            }
    }

suspend fun getPosts(client: OkHttpClient): List<Post> =
    makeRequest("$BASE_URL/api/slow/posts", client, object : TypeToken<List<Post>>() {})
// –ü—Ä–æ—Å—Ç–æ –≤—ã–∑—ã–≤–∞–µ—Ç makeRequest —Å–æ —Å–≤–æ–∏–º–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏

suspend fun getComments(client: OkHttpClient, id: Long): List<Comment> =
    makeRequest("$BASE_URL/api/slow/posts/$id/comments", client, object : TypeToken<List<Comment>>() {})

suspend fun getAuthor(client: OkHttpClient, id: Long): Author =
    makeRequest("$BASE_URL/api/authors/$id", client, object : TypeToken<Author>() {})

/*
fun main() {
    runBlocking {
        println(Thread.currentThread().name)
    }
}
*/

/*
fun main() {
    CoroutineScope(EmptyCoroutineContext).launch {
        println(Thread.currentThread().name)
    }

    Thread.sleep(1000L)
}
*/

/*
fun main() {
    val custom = Executors.newFixedThreadPool(64).asCoroutineDispatcher()
    with(CoroutineScope(EmptyCoroutineContext)) {
        launch(Dispatchers.Default) {
            println(Thread.currentThread().name)
        }
        launch(Dispatchers.IO) {
            println(Thread.currentThread().name)
        }
        // will throw exception without UI
        // launch(Dispatchers.Main) {
        //    println(Thread.currentThread().name)
        // }

        launch(custom) {
            println(Thread.currentThread().name)
        }
    }
    Thread.sleep(1000L)
    custom.close()
}
*/

/*
private val gson = Gson()
private val BASE_URL = "http://127.0.0.1:9999"
private val client = OkHttpClient.Builder()
    .addInterceptor(HttpLoggingInterceptor(::println).apply {
        level = HttpLoggingInterceptor.Level.BODY
    })
    .connectTimeout(30, TimeUnit.SECONDS)
    .build()

fun main() {
    with(CoroutineScope(EmptyCoroutineContext)) {
        launch {
            try {
                val posts = getPosts(client)
                    .map { post ->
                        PostWithComments(post, getComments(client, post.id))
                    }
                println(posts)
            } catch (e: Exception) {
                e.printStackTrace()
            }
        }
    }
    Thread.sleep(30_000L)
}

suspend fun OkHttpClient.apiCall(url: String): Response {
    return suspendCoroutine { continuation ->
        Request.Builder()
            .url(url)
            .build()
            .let(::newCall)
            .enqueue(object : Callback {
                override fun onResponse(call: Call, response: Response) {
                    continuation.resume(response)
                }

                override fun onFailure(call: Call, e: IOException) {
                    continuation.resumeWithException(e)
                }
            })
    }
}

suspend fun <T> makeRequest(url: String, client: OkHttpClient, typeToken: TypeToken<T>): T =
    withContext(Dispatchers.IO) {
        client.apiCall(url)
            .let { response ->
                if (!response.isSuccessful) {
                    response.close()
                    throw RuntimeException(response.message)
                }
                val body = response.body ?: throw RuntimeException("response body is null")
                gson.fromJson(body.string(), typeToken.type)
            }
    }

suspend fun getPosts(client: OkHttpClient): List<Post> =
    makeRequest("$BASE_URL/api/slow/posts", client, object : TypeToken<List<Post>>() {})

suspend fun getComments(client: OkHttpClient, id: Long): List<Comment> =
    makeRequest("$BASE_URL/api/slow/posts/$id/comments", client, object : TypeToken<List<Comment>>() {})
*/